import os
import json
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
with open("obd2_errors.json", "r", encoding="utf-8") as f:
    error_codes = json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /code <–∫–æ–¥ –æ—à–∏–±–∫–∏> –∏–ª–∏ /launch_manual –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF –º–∞–Ω—É–∞–ª–∞.")

async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–¥ –æ—à–∏–±–∫–∏: /code P0171")
        return

    code = context.args[0].upper()
    data = error_codes.get(code)
    if data:
        reply = f"üîß –ö–æ–¥: {code}\n–ü—Ä–∏—á–∏–Ω–∞: {data['reason']}\n–†–µ—à–µ–Ω–∏–µ: {data['solution']}"
    else:
        reply = "–ö–æ–¥ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
    await update.message.reply_text(reply)

async def launch_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("launch_manual.pdf", "rb") as f:
        await update.message.reply_document(InputFile(f, filename="launch_manual.pdf"))

if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("code", code))
    app.add_handler(CommandHandler("launch_manual", launch_manual))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
